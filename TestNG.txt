TestNG 
testng.org
------
Testng is a framework 
plugin and dependency needed
no main method

why we use this framework?
--------------------------
1. i have 100 testcases (regression) , using main one by one
2. if i want to complete all 200 tc in one day. manual increase resourse
   in testng parallel execution is provided.
3. gird in multiple system
4. testng provides test result.
5. summary HTML report is provided by testng.
6. execute data with multiple data.(called Data Driven) eg. 3 set of data.
7. can be able to control the execution using testNG annotations and attributes.
8. support cross browser testing (run in different browsers)
9. testng assertion (for verification and validation)
10. retry failed testcases programmatically (execute-fail=retry2 times-then raise defect)

parallel
--------
test1 - chrome 
test2 - chrome
test3 - chrome
test4 - chrome
 if we run in parallel in only take 5 mins
 
cross browser
-------------
test1 -chrome,edge,firefox

in testNg the method with @Test is considered as a testcase

Sequential run in TestNg
------------------------
select testcases -> rightclick -> testNg - > conver to testNg
created a xml file -> design and source

<suite name="TestLeaf">
        ---------------------------------------------
	<test thread-count="5" name="Test">  ->to identify a test group. EXAMPLE- all test under this test Tag comes under 1 module
		<classes>
			<class name="package.classname1"/>
			<class name="package.classname2"/>
			<class name="package.classname3"/>
		</classes>
	</test>
        ---------------------------------------------
	<test thread-count="5" name="Test">  ->to identify a test group. EXAMPLE- all test under this test Tag comes under 2 module
		<classes>
			<class name="package.classname4"/>
			<class name="package.classname5"/>
			<class name="package.classname6"/>
		</classes>
	</test>
        ---------------------------------------------
</suite>
refresh the project

test-output
-----------
emailable-report.html -> open with system editor
test passed skipped retried failed time includedgroups excludedgroups

PARALLEL execution
------------------
when creating xml file, give parallel execution as none/methods/classes/tests

<test thread-count="5" name="Test" parallel="classes">  
		<classes>
			<class name="package.classname4"/>
			<class name="package.classname5"/>
			<class name="package.classname6"/>
		</classes>
	</test>

thread count will run two threads will be created, one become free, then other will be run by that thread.

even suite level parallel can be given.

VERBOSE 
-------
0 to 10
0 -> no log
10 -> max log
5 is enough for automation
default value is 2
how?

when you open index.html file
open -> there is a xml file automatically. in there we have verbose in it.

if i want to get failer log in the console we should use verbose

<test thread-count="5" name="Test" parallel="classes" verbose="5">  
		<classes>
			<class name="package.classname4"/>
			<class name="package.classname5"/>
			<class name="package.classname6"/>
		</classes>
	</test>

TestNG Annotations
------------------
@Test -> Mandatory (ONLY) in testNG

we can create a testNG class by rightclick-> and create TestNG class
in creates by default in src/test
if i want to create in src/main -> change in source folder
you can include annotations

@beforesuite
	@beforetest
		@beforeclass
			@beforemethod
				      	@test
			@aftermethod
		@afterclass
	@aftertest
@aftersuite

its a fixed order
but we can avoid not mandatory

precondition- before
postcondition - after

when xml is executed. in suite level <suite> it will look for @beforesuite
similarly for all levels.

HOW TO SETUP COMMON PRECONDITION AND POST CONDITION
---------------------------------------------------



2 day
-----
few attributes
--------------
1. if i want a single tc in multiple times
   ---------------------------------------
   invocationCount
   @Test(invocationCount=5") 
   its a method and will accept is int. 
   default is 1.
------------------------------------------------------------------------------------------
2. if i want to give execution test's in priority
   ----------------------------------------------
   normally it will take ascii order by names of @test
   @Test(priority=1)
   it will accept int
   it will accept negative
   default is 0

1- @test(priority=1)
2- @test
3- @test(priority=2)

2-1-3

1- @test(priority=-1)
2- @test
3- @test(priority=1)

1-2-3
------------------------------------------------------------------------------------------
3. we want to ignore (not skipped) a test
   --------------------------------------
   enabled = false -> ignored
   default value is true
   data type is boolean
(learn more in next week)

position of attribute placing is not taken into importance.
---------------------------------------------------------------
1.static data parametraization
----------------------------
The data we use common for all test cases.

1. go to xml file
<suite>
<parameter name="url" value="http://testleaf.com"></parameter>
<parameter name="username" value="demosalesManager"></parameter>
<parameter name="password" value="crmsfa</parameter>
<test>
<classes>
<class>
</class>
</classes>
</test>
</suite>

2. 
@Parameters({"url","usename","password"})
@beforeMethod
public void precondition(String url,String username,String password)
{
webdriverManager.chromedriver().setup();
driver = new chromeDriver();
driver.get(url);

we cannot run as normal run. only run in xml.

in java they seperated Java and data seperately.
so data in xml file or properties file.
-------------------------------------------------------------------------
2.dynamic data parameterization
-------------------------------
@Test(dataProvider = "sendData"
public void run(String 1, String 2, String 3, String 4)
{
}

@DataProvider
public void sendData()
{
			    [row-> sets of data to be passes][no of column]
String[][] data = new String[2][4];
data[0][0] ="";
data[0][1] ="";
data[0][2] ="";
data[0][3] ="";

data[1][0] ="";
data[1][1] ="";
data[1][2] ="";
data[1][3] ="";

return data;

specific to particular testcase data(method)
---------------------------------------------
how to intergrate excel data to the testcase
dependency needed are
(poi)()
in excel if i add '99 will be considered as a string
create a xlxs file
create a folder ->createlead.xlxs
whole xl doc is called "workbook"
it can have worksheet

WorkBook
	WorkSheet1
		  Rows1
			cells
		  Rows2
			cells
		  Rows3
			cells
	WorkSheet2
		  Rows1
			cells
		  Rows2
			cells
		  Rows3
			cells
	WorkSheet3
		  Rows1
			cells
		  Rows2
			cells
		  Rows3
			cells

XSSFWorkbook wb = new XSSFWorkbook("C:\\TestLeaf\\MavenProject\\Data\\CreateLead.xlsx");
		XSSFSheet sheetAt = wb.getSheetAt(0);
		int lastRowNum = sheetAt.getLastRowNum();
		int columnCount = sheetAt.getRow(0).getLastCellNum();
		for (int i = 1; i < lastRowNum; i++) {
			for (int j = 0; j < columnCount; j++) {
				String text = sheetAt.getRow(i).getCell(j).getStringCellValue();
				System.out.println(text);
			}
			wb.close();

------------------------------------------
intergrate xl data to data provider

1. declare two dimensional Array in program with rowcount and cellcount.
String[][] data = new String[row][column];
2. save data in two dimensional array. Assign the excel data[i-1][j]
data[i][j] = text;
3. add the return statement and update the return type as string[][]
4. create object in data provider.

Step to parameterize the file name
----------------------------------
1.create a argument in method (String fileName)
2.concatenate the xssfworbook file path with the variable
3. pass the file argument as "createData" or "edit data"








